import{A as n,a}from"./AuthService-g_HBzLPV.js";function d(e,t){console.error(e),e.status&&(e.status==401||e.status==403)&&n.logout();var s="<strong>Ein Fehler ist aufgetreten</strong><br/>";e.response!=null&&e.response.data!=null&&e.response.data.detail!=null?s=s+e.response.data.detail:e.message!=null&&(s=s+e.message),t.value=s}const g={jsonDateRegex(){return/^(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})(T(?<hour>\d{2}):(?<minutes>\d{2}):(?<seconds>\d{2})\.(?<millis>\d+))?$/},datesToStrings(e){Array.isArray(e)||(e=new Array(1).fill(e));for(const t of e)for(const s in t)if(t[s]instanceof Date){const i=t[s].getTimezoneOffset();t[s]=new Date(t[s].getTime()-i*60*1e3),t[s]=t[s].toISOString().split("T")[0]}},stringsToDates(e){Array.isArray(e)||(e=new Array(1).fill(e));for(const t of e)for(const s in t)if(typeof t[s]=="string"&&t[s].match(this.jsonDateRegex())){const{year:i,month:p,day:c,hour:o,minutes:r,seconds:l}=this.jsonDateRegex().exec(t[s]).groups;t[s]=new Date(parseInt(i),parseInt(p)-1,parseInt(c),o!=null?parseInt(o):null,r!=null?parseInt(r):null,l!=null?parseInt(l):null)}}},f={async get(e){return a.get(n.getEndpoint()+this.normalizePath(e),{headers:{accept:"application/json","x-api-key":n.getApikey()}})},async post(e,t){return a.post(n.getEndpoint()+this.normalizePath(e),t,{headers:{accept:"application/json","x-api-key":n.getApikey()}})},async put(e,t){return a.put(n.getEndpoint()+this.normalizePath(e),t,{headers:{accept:"application/json","x-api-key":n.getApikey()}})},async delete(e){return a.delete(n.getEndpoint()+this.normalizePath(e),{headers:{accept:"application/json","x-api-key":n.getApikey()}})},normalizePath(e){return e.startsWith("/")&&(e=e.substring(1)),e}};export{f as A,g as J,d as h};
